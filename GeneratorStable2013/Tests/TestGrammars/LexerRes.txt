Parsing: 'programm  :=  vars, "; void main() {", stat, "; }"'

NotTerminal: 'programm'
IsSign: ':='
NotTerminal: 'vars'
Operation: ','
Terminal: '; void main() {'
Operation: ','
NotTerminal: 'stat'
Operation: ','
Terminal: '; }'

Parsing: 'stat := for'

NotTerminal: 'stat'
IsSign: ':='
NotTerminal: 'for'

Parsing: 'for := "for (ind_1 =", forFrom,  "; ind_1 <=", forTo, "; ind_1 = ind_1 + 1) {", assign, "; }" '

NotTerminal: 'for'
IsSign: ':='
Terminal: 'for (ind_1 ='
Operation: ','
NotTerminal: 'forFrom'
Operation: ','
Terminal: '; ind_1 <='
Operation: ','
NotTerminal: 'forTo'
Operation: ','
Terminal: '; ind_1 = ind_1 + 1) {'
Operation: ','
NotTerminal: 'assign'
Operation: ','
Terminal: '; }'

Parsing: 'forFrom := Rnd(10)'

NotTerminal: 'forFrom'
IsSign: ':='
NotTerminal: 'Rnd'
LeftBr: '('
IntNumber: '10'
RightBr: ')'

Parsing: 'forTo := Rnd(#intArr[0].Expr2 - 1)'

NotTerminal: 'forTo'
IsSign: ':='
NotTerminal: 'Rnd'
LeftBr: '('
Sign: '#'
NotTerminal: 'intArr'
Sign: '['
IntNumber: '0'
Sign: ']'
Sign: '.'
NotTerminal: 'Expr2'
AddOp: '-'
IntNumber: '1'
RightBr: ')'

Parsing: 'assign:= "debug info:",#forFrom, #forTo, #intArr[0].Expr2  ,"--- int_1[ind_1] = int_2[ind_2 + ", rndNorm ,"]"'

NotTerminal: 'assign'
IsSign: ':='
Terminal: 'debug info:'
Operation: ','
Sign: '#'
NotTerminal: 'forFrom'
Operation: ','
Sign: '#'
NotTerminal: 'forTo'
Operation: ','
Sign: '#'
NotTerminal: 'intArr'
Sign: '['
IntNumber: '0'
Sign: ']'
Sign: '.'
NotTerminal: 'Expr2'
Operation: ','
Terminal: '--- int_1[ind_1] = int_2[ind_2 + '
Operation: ','
NotTerminal: 'rndNorm'
Operation: ','
Terminal: ']'

Parsing: 'rndNorm := "yo"'

NotTerminal: 'rndNorm'
IsSign: ':='
Terminal: 'yo'

Parsing: ''


Parsing: '//Those are my vars!'


Parsing: 'vars := intArr{3}, doubleArr{1}, indVar{3}'

NotTerminal: 'vars'
IsSign: ':='
NotTerminal: 'intArr'
Sign: '{'
IntNumber: '3'
Sign: '}'
Operation: ','
NotTerminal: 'doubleArr'
Sign: '{'
IntNumber: '1'
Sign: '}'
Operation: ','
NotTerminal: 'indVar'
Sign: '{'
IntNumber: '3'
Sign: '}'

Parsing: 'intArr := "int", NameCount("int_"), "[", Rnd(50, 100), "]"'

NotTerminal: 'intArr'
IsSign: ':='
Terminal: 'int'
Operation: ','
NotTerminal: 'NameCount'
LeftBr: '('
Terminal: 'int_'
RightBr: ')'
Operation: ','
Terminal: '['
Operation: ','
NotTerminal: 'Rnd'
LeftBr: '('
IntNumber: '50'
Operation: ','
IntNumber: '100'
RightBr: ')'
Operation: ','
Terminal: ']'

Parsing: 'doubleArr := "double", NameCount("double_"), "[", Rnd(10, 40), "]"'

NotTerminal: 'doubleArr'
IsSign: ':='
Terminal: 'double'
Operation: ','
NotTerminal: 'NameCount'
LeftBr: '('
Terminal: 'double_'
RightBr: ')'
Operation: ','
Terminal: '['
Operation: ','
NotTerminal: 'Rnd'
LeftBr: '('
IntNumber: '10'
Operation: ','
IntNumber: '40'
RightBr: ')'
Operation: ','
Terminal: ']'

Parsing: 'indVar := "int", NameCount("ind_")'

NotTerminal: 'indVar'
IsSign: ':='
Terminal: 'int'
Operation: ','
NotTerminal: 'NameCount'
LeftBr: '('
Terminal: 'ind_'
RightBr: ')'