Избавление от циклов.

Вводятся определения Циклического Нетерминала (Символа) и Циклической Альтернативы для того, чтобы ограничить количество итераций через циклический символ.
Когда в процессе вывода количество итераций превышено (срабатывает условие завершения вывода - будет уточнено далее), разрешается выбирать только
НЕ циклические Альтернативы, что приводит к мягкому (корректному, естественному) завершению вывода.

После считывания и разбора грамматики выполняются следующие процедуры:
1. Выявление и маркировка циклических символов (первый проход по грамматике с подстановкой нетерминалов во всех альтернативах до обнаружения цикла)

1.5. Маркируются символы - воронки (детерминированные циклические аттракторы). Т.е. такой символ, выбрав который, мы неминуемо выберем циклический символ,
например for ведет к циклическому stats.

2. Маркировка циклических альтернатив (рекурсивно вычисляется от символов - возможно этот шаг пропускается и вычисление происходит каждый раз при обращениии к Alternative.IsCyclic)
3. Верификация выявленных циклических альтернатив, заключающаяся в том, что в каждом наборе альтернатив должна быть хотя бы одна НЕ циклическая альтернатива. 
Противное будет означать ошибку в грамматике либо определениях циклического символа и альтернативы (или в реализации алгоритма).

Правило грамматики := имя нетерминала "=" IPhrase
Фраза := Sequence | AlternativeSet | Symbol | QuantifiedPhrase | ... (разные расширения в виде трансдукторов, выражений доступа к уже выведенной части цепочки и т.д.)

Например,
programm := "void main() {", stat, "}"		//Здесь Rule.RightSide = Sequence, у которой список  Sequence.Phrases содержит 3 Symbol
	stat := assign | for					//Здесь Rule.RightSide = AlternativeSet у которой список  AlternativeSet.Phrases содержит 2 Symbol
		assign :=  "a=b"					//Здесь Rule.RightSide = Symbol, у которого Symbol.IsTerminal = true
		for := "for (i=0;i<10;i++)", stat   //Здесь Rule.RightSide = Sequence

Определение 0 Путь вывода - это... 
пример: "programm->stat->for->stat->assign"
Им характеризуется каждый терминал в готовой цепочке. (Полученной при конкретном выводе)
При подстановке очередного нетерминала, ему приписывается копия пути вывода и к ней добавляется этот символ.
	
Определение 1. Нетерминал будем называть циклическим, если в "Пути вывода", образующимся при подстановке нетерминалов, начиная с главного символа,
 он встерчается более одного раза.
 
рекурсивное Определение 2. Альтернативу будем называть циклической, если она:
а) циклический символ или воронка.
б) последовательность, в которой есть хотя бы одни циклический (или воронка) символ.
в) набор альтернатив, в котором есть хотя бы одни циклический символ (или все??? какой вариант удовлетворит условию чекинга (3)).
г) квантификатор типа A* или {A} (т.е. такой, в котором максимальное значение не задано)
д) выражение доступа, указывающее на циклический... ууу!
е) трансдуктор, возвращающий... уууу!!!
