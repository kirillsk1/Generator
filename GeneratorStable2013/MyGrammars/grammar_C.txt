_programm := blockvars,"void main() {",  "rep_InitBegin", bodyStats,  "rep_InitEnd", "}" 
statAssigns := statAssign{2..10}
statFors := statFor{1..3}
statForsF := statForF{2..2}
statIfs1 := statIf | statIf, statIfs
bodyStats1 := bodyStat | bodyStat, bodyStats
bodyStats := bodyStat, bodyStat
statAssign := intAssign | realAssign
realAssign := variable, "=" , formula, ";"
intAssign := intArray, "=" , intFormula, ";"
formula := number, addMembers
intFormula := "rep_intConst", addIntMembers
addMember := addSign, number, addSign, variable | addSign, variable
addIntMember := addSign, "rep_intConst", addSign, intArray | addSign, intArray
addMembers1 := addMember | addMember, addMembers
addMembers := addMember{1..3}
addIntMembers := addIntMember | addIntMember, addIntMembers
addSign := "+" | "-"
number := "rep_intConst" | "rep_realConst"
indExpr := "comInd", "rep_indND"
forstats1 := statForstatFor | statForstatFor, forstats
forstats := statForstatFor{1..3}
ifstats1 := statIfstatIf | statIfstatIf, ifstats
statIfs := statIf{1..3}
ifthenelsestats1 := statIfThenElsestatIfThenElse | statIfThenElsestatIfThenElse, ifthenelsestats
statIfThenElses := statIfThenElse{1..3}
statFor := "for(", "forInd", "= rep_minBound rep_sep", "forInd", "<= rep_maxBound rep_sep", "forInd", "+", "rep_absND",") {", statForstatFor ,"}"
statForF := "for(", "forFInd", "= rep_minFBound rep_sep", "forFInd", "<= rep_maxFBound rep_sep", "forFInd", "+", "rep_FStep",") {", statForstatFor ,"}"
statIf := "if(", condition, ") {", statIfstatIf ,"}"
statIfThenElse := "if(", condition,") {", statIfThenElsestatIfThenElse , "} else {", statIfThenElsestatIfThenElse ,"}"
condition := variable, "< rep_intConst" | variable, "> rep_intConst"
statWhile := "while( whileInd <= rep_maxBound )", "{", "whileInd = whileInd + rep_absND",";", statWhilestatWhile, "}"
whilestats1 := statWhilestatWhile | statWhilestatWhile, whilestats
statWhiles := statWhile{1..3}
switchstats1 := statSwitch | statSwitch, statSwitches
statSwitches := statSwitch{1..3}
statSwitch := "switch","(" ,switchToggle, ")","{" , statcases, "default", ":", statSwitchstatSwitch, "break", ";", "}"  
statcases1 := caseStat | caseStat, statcases
statcases := caseStat{1..3}
caseStat := "case", "rep_intConst", ":", statSwitchstatSwitch, "break", ";"
switchToggle := intArray
statBreak := "break", ";"
statContinue := "continue", ";"
statGoTo := "goto label", ";"
blockvars := "replaceVars"
def_intArray := "5" 
def_realArray := "5" 
def_intIndex := "1" 
intArray := "intArray_0[", indExpr ,"]" | "intArray_1[", indExpr ,"]" | "intArray_2[", indExpr ,"]" | "intArray_3[", indExpr ,"]" | "intArray_4[", indExpr ,"]" 
realArray := "realArray_0[", indExpr ,"]" | "realArray_1[", indExpr ,"]" | "realArray_2[", indExpr ,"]"
intIndex := "intIndex_0" | "intIndex_1" | "intIndex_2" | "intIndex_3"
variable := intArray | realArray 
bodyStat := statFor | statAssign | statIf | statWhile | statSwitch | statIfThenElse | statGoTo
statForstatFor := statAssigns | statFors | statWhiles | statIfThenElses | statBreak | statContinue | statSwitches | statGoTo 
statWhilestatWhile := statAssigns | statFors | statWhiles | statIfThenElses | statBreak | statContinue | statSwitches | statGoTo 
statIfstatIf := statAssigns | statFors | statWhiles | statIfThenElses | statBreak | statContinue | statSwitches | statGoTo  
statIfThenElsestatIfThenElse := statAssigns | statFors | statWhiles | statIfThenElses | statBreak | statContinue | statSwitches | statGoTo  
statSwitchstatSwitch := statAssigns | statFors | statWhiles | statIfThenElses | statBreak | statContinue | statSwitches | statGoTo 